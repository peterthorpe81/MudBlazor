// Copyright (c) MudBlazor 2021
// MudBlazor licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace MudBlazor.Analyzers
{
    /// <summary>
    /// Created on demand before each generation pass
    /// </summary>
    class SyntaxReceiver : ISyntaxContextReceiver
    {
        private readonly IEqualityComparer<ISymbol?> _symbolComparer = new MetadataSymbolComparer();
        private readonly ConcurrentDictionary<ITypeSymbol, ComponentDescriptor> _componentDescriptors = new(SymbolEqualityComparer.Default);
        //private readonly INamedTypeSymbol? _componentBaseSymbol;
        //private readonly INamedTypeSymbol? _parameterSymbol;
        //private readonly INamedTypeSymbol? _renderTreeBuilderSymbol;
        // private readonly INamedTypeSymbol? _mudComponentBaseType;

        public List<INamedTypeSymbol> Types { get; set; }

        public SyntaxReceiver(List<INamedTypeSymbol> types)
        {
            this.Types = types;
        }
       // public bool IsValid => _mudComponentBaseType is not null;


        
        /// <summary>
        /// Called for every syntax node in the compilation, we can inspect the nodes and save any information useful for generation
        /// </summary>
        public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
        {
           // context.SemanticModel

            /* context.SemanticModel.GetSymbolInfo
             _componentBaseSymbol = context.SemanticModel.GetBestTypeByMetadataName("Microsoft.AspNetCore.Components.ComponentBase");
             _parameterSymbol = compilation.GetBestTypeByMetadataName("Microsoft.AspNetCore.Components.ParameterAttribute");
             _renderTreeBuilderSymbol = compilation.GetBestTypeByMetadataName("Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder");
             
            */

            //IFieldSymbol fieldSymbol = context.SemanticModel.GetDeclaredSymbol(context.Node) as IFieldSymbol;
            //var s = context.SemanticModel.GetDeclaredSymbol(context);
            var symbol = context.SemanticModel.GetDeclaredSymbol(context.Node);
           //context.SemanticModel.

            //_mudComponentBaseType = compilation.GetBestTypeByMetadataName("MudBlazor.MudComponentBase");

            if (symbol is INamedTypeSymbol tpyeSymbol)

            {
                //if (tpyeSymbol is not null && tpyeSymbol.IsOrInheritFrom(_mudComponentBaseType, _symbolComparer))
               // {
                    Types.Add(tpyeSymbol);
               // }


            }
        }
    }

    [Generator]
    public sealed class MudCustomCSSGeneratorc : ISourceGenerator
    {       
        public const string CustomCSSProperty = "build_property.mudcustomcssbuildpath";
        public List<INamedTypeSymbol> Types { get; set; } = new List<INamedTypeSymbol>();

        public void Initialize(GeneratorInitializationContext context)
        {
              //  context.
              //context.RegisterForPostInitialization((i) =>  i.AddSource("AutoNotifyAttribute.g.cs", attributeText));
              // context.
              // Register a syntax receiver that will be created for each generation pass
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver(Types));
        }

        public void Execute(GeneratorExecutionContext ctx)
        {
            var global = ctx.AnalyzerConfigOptions.GlobalOptions;

            if (global.TryGetValue(MudComponentUnknownParametersAnalyzer.DebugAnalyzerProperty, out var debugValue) &&
                bool.TryParse(debugValue, out var shouldDebug) && shouldDebug)
            {
                Debugger.Launch();
            }

            if (!(ctx.SyntaxContextReceiver is SyntaxReceiver receiver))
                return;

           
            if (global.TryGetValue(CustomCSSProperty, out string? customCSSValue) && string.IsNullOrWhiteSpace(customCSSValue))
            {
                return;
            }

            /*if (global.TryGetValue(MudComponentUnknownParametersAnalyzer.DebugAnalyzerProperty, out var debugValue) &&
                bool.TryParse(debugValue, out var shouldDebug) && shouldDebug)
            {
                Debugger.Launch();
            }*/
        }
    }
}
