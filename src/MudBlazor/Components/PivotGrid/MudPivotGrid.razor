@namespace MudBlazor
@inherits MudComponentBase
@using MudBlazor.Pivot
@using MudBlazor.Utilities
@typeparam T
@inject InternalMudLocalizer Localizer


<CascadingValue IsFixed="true" Value="this">@Fields</CascadingValue>
<CascadingValue IsFixed="true" Value="this">@Measures</CascadingValue>

<CascadingValue IsFixed="true" Value="this">

<div class="@_classname" style="@_style">
    @if (Items is not null && _columns is not null && _rows is not null && _measures is not null &&
        Items.Any() && _measures.Any())
    {

        <div class="@_tableClass" style="@_tableStyle" @attributes="UserAttributes">
            <table class="mud-table-root" data-hRows="@ColHeaderRowCount" data-hCols="@RowHeaderColCount">

            @*Render Headers*@
            @{
                var cornerRows = ColHeaderRowCount - (ShowHeaderTitles ? 1 : 0);
                var cornerColumns = RowHeaderColCount - (ShowHeaderTitles ? 1 : 0);
                    <thead class="@_headClassname">
                    @for (var i = 0; i < RowRender.MaxDepth; i++)
                    {
                            <tr class="@_headRowClassname">
                            @if (i == 0)
                            {
                                    <th class="@_cornerClass" colspan="@cornerColumns" rowspan="@cornerRows"></th>
                            }
                            @if (IsVertical && ShowHeaderTitles && i + 1 == RowRender.MaxDepth)
                            {
                               @for (int j = 0; j < ColRender.MaxDepth; j++)
                                {
                                        <th class="@RowTitleClass(ColRender.MaxDepth - j) tmph">@ColRender.HeaderTitle(j)</th>
                                }
                            }
                            @{var colDepth = RowRender.MaxDepth - i; }

                            @if (ShowHeaderTitles)
                            {
                                    <th class="@ColTitleClass(colDepth) tmps">@RowRender.HeaderTitle(i)</th>
                            }
                            @foreach (var cell in RowRender[i])
                            {                                
                                var leafCount = cell.Leaf.Count() * HorisontalMeasureRatio;
                                var isTotal = (cell is PivotTableTotalColumnRender<T>);
                                var rowSpan = (isTotal ? colDepth : 1);                                       

                                <th class="@ColHeaderClass(cell.CellType, colDepth) tmpx" colspan="@leafCount" rowspan="@rowSpan">@cell.Title</th>
                            }
                        </tr>
                    }
                    @if (!IsVertical)
                    {
                            <tr class="@_headRowClassname">
                            @if (ShowHeaderTitles)
                            {
                                @for (int i = 0; i < ColRender.MaxDepth; i++)
                                {
                                        <th class="@RowTitleClass(ColRender.MaxDepth - i) tmph2">@ColRender.HeaderTitle(i)</th>
                                }
                            }
                            @foreach (var cell in RowRender.Leaves)
                            {
                                @foreach (var measure in _pivot.Measures)
                                {                                        
                                    /*Component RenderMeasureTitleCell */
                                        <th class="@MeasureTitleClass(cell.CellType, cell.GetRenderDepth(RowRender)) dfdf">@measure.Title</th>
                                }
                            }
                        </tr>
                    }
                </thead>

            }
            @*Render Rows*@
                <tbody class="mud-table-body">
                @foreach (var leaf in ColRender.Leaves)
                {
                    var path = leaf.Path;
                    var newLeaf = path.LastOrDefault(p => !p.IsFirstChild);

                        bool levelFound = (newLeaf == null);
                        int rowDepth = 0;
                        CellType rowType = CellType.Value;                    

                        @if (IsVertical)
                        {
                            <tr class="@_rowClass tmpa">
                                @foreach (var cell in path)
                                {
                                    if (!levelFound && cell != newLeaf)
                                        continue;
                                    levelFound = true;

                                    var rowSpan = cell.Leaf.Count() * VerticalMeasureRatio;
                                    var isTotal = (cell is PivotTableTotalColumnRender<T>);
                                    var colSpan = (isTotal ? cell.GetRenderDepth(ColRender) : 1);

                                    @if (isTotal && cell.GetRenderDepth(ColRender) == 0)//ColRender.MaxDepth == cell.depth)

                                    { }
                                    else
                                    {
                                        rowDepth = cell.GetRenderDepth(ColRender);
                                        rowType = cell.CellType;
                                        <th  class="@RowHeaderClass(rowType, rowDepth)" colspan="@colSpan" rowspan="@rowSpan">@cell.Title</th>
                                    }
                                }
                                @{
                                    var firstMeasure = _pivot.Measures.First();
                                    <th  class="@MeasureTitleClass(rowType, rowDepth) tmp1">@firstMeasure.Title</th>
                                }

                                @foreach (var column in RowRender.Leaves)
                                {
                                    <td  class="@MeasureClass(column.CellType, column.GetRenderDepth(RowRender), rowType, rowDepth) tmpka">@_pivot[leaf.Cell, column.Cell, firstMeasure].ToString(firstMeasure.Format)</td>
                                }
                            </tr>
                            bool first = true;
                            @foreach (var measure in _pivot.Measures)
                            {         
                            if (first)
                            {
                                first = false;
                                continue;
                            }
                            <tr  class="@_rowClass tmpgx">
                                @*Component RenderMeasureTitleCell *@
                                    <th class="@MeasureTitleClass(rowType, rowDepth) tmp1">@measure.Title</th>

                                @foreach (var column in RowRender.Leaves)
                                {
                                        <td  class="@MeasureClass(column.CellType, column.GetRenderDepth(RowRender), rowType, rowDepth) tmpkb">@_pivot[leaf.Cell, column.Cell, measure].ToString(measure.Format)</td>
                                }
                            </tr>
                            }

                        }
                        else
                        {
                            rowType = CellType.Value;
                            rowDepth = 0;

                            <tr  class="@_rowClass tmpa">
                            @foreach (var cell in path)
                            {
                                if (!levelFound && cell != newLeaf)
                                    continue;
                                levelFound = true;

                                var rowSpan = cell.Leaf.Count() * VerticalMeasureRatio;
                                bool isTotal = (cell is PivotTableTotalColumnRender<T>);
                                var colSpan = (isTotal ? cell.GetRenderDepth(ColRender) : 1);
                                @if (colSpan > 0)
                                {
                                        rowDepth = cell.GetRenderDepth(ColRender);
                                        rowType = cell.CellType;
                                        <th class="@RowHeaderClass(rowType, rowDepth)" colspan="@colSpan" rowspan="@rowSpan">@cell.Title</th>
                                }
                            }

                            @foreach (var column in RowRender.Leaves)
                            {
                                foreach (var measure in _pivot.Measures)
                                    {
                                        //var colDepth = column.GetRenderDepth(RowRender);
                                        //adjust so td-0 css for values
                                        //var totalDepth = rowDepth;
                                        //var adjustedRow = rowDepth;
                                        //if (rowType == CellType.Value)
                                        //    totalDepth--;
                                        /*rowdepth
                                        var totalDepth = rowDepth;
                                        if (!isRowTotal)
                                        totalDepth--;
                                        */

                                        /*rowdepthcolumntotal
                                        var totalDepth = rowDepth;
                                        if (colHeaderCell.ColumnType == ColumnType.Value && rowType == CellType.Value)
                                        totalDepth--;
                                        */

                                        /*rowdepthboldcolumntotal*/
                                       /* var totalDepth = rowDepth;
                                        if (column.CellType != CellType.Value)
                                            totalDepth++;
                                        if (column.CellType == CellType.Value && rowType == CellType.Value)
                                            totalDepth--;
*/

                                        /*
                                        if (colHeaderCell.ColumnType != ColumnType.Value)
                                            totalDepth++;
                                        if (colHeaderCell.ColumnType == ColumnType.Value  && rowType == CellType.Value)
                                            totalDepth--;
                                        */
                                        <td  class="@MeasureClass(column.CellType, column.GetRenderDepth(RowRender), rowType, rowDepth) tmpkc">
                                            @_pivot[leaf.Cell, column.Cell, measure].ToString(measure.Format)</td>
                                }
                            }

                            </tr>
                        }

                }
            </tbody>
        </table>
        </div>
    }
</div>
</CascadingValue>