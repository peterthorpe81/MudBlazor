@namespace MudBlazor
@inherits MudComponentBase
@using MudBlazor.Pivot
@using MudBlazor.Utilities
@typeparam T
@inject InternalMudLocalizer Localizer

<div @attributes="UserAttributes" class="@_classname" style="@_style">
    @if (Items is not null && Columns is not null && Rows is not null && Measures is not null &&
        Items.Any() && Measures.Any())
    {

        <div class="@_tableClass" style="@_tableStyle">
        <table class="mud-table-root" data-hRows="@ColHeaderRowCount" data-hCols="@RowHeaderColCount">

            @*Render Headers*@
            @{
                var cornerRows = ColHeaderRowCount - (RenderHeaderTitles ? 1 : 0);
                var cornerColumns = RowHeaderColCount - (RenderHeaderTitles ? 1 : 0);
                    <thead class="@_headClassname">
                    @for (var i = 0; i < RowRender.MaxDepth; i++)
                    {
                        <tr class="@_headRowClassname">
                            @if (i == 0)
                            {
                                <th class="@_cornerClass ch-0 rh-0" colspan="@cornerColumns" rowspan="@cornerRows"></th>
                            }
                            @if (RenderHeaderTitles)
                            {
                                <th class="@_columnTitleClass rh-@i ch-@cornerColumns">@RowRender.HeaderTitle(i)</th>
                            }
                            @foreach (var cell in RowRender[i])
                            {
                                var leafCount = cell.Leaf.Count() * HorisontalMeasureRatio;
                                var isTotal = (cell is PivotTableTotalColumnRender<T>);
                                var rowSpan = (isTotal ? RowRender.MaxDepth - cell.depth : 1);
                                var calcClass = new CssBuilder(CellClass).AddClass($"rh-{i}").AddClass(TotalClass, isTotal).Build();
                                <th class="@calcClass tmpx" colspan="@leafCount" rowspan="@rowSpan">@cell.Title</th>
                            }
                        </tr>
                    }
                    @if (!IsVertical)
                    {
                        <tr class="@_headRowClassname">
                            @if (RenderHeaderTitles)
                            {
                                @for (int i = 0; i < ColRender.MaxDepth; i++)
                                {
                                        <th class="@_rowTitleClass rh-@cornerRows ch-@i">@ColRender.HeaderTitle(i)</th>
                                }
                            }
                            @foreach (var cell in RowRender.Leaves)
                            {
                                @foreach (var measure in _pivot.Measures)
                                {
                                    /*Component RenderMeasureTitleCell */
                                    <th class="@_measureTitleClass">@measure.Title</th>
                                }
                            }
                        </tr>
                    }
                </thead>

            }
            @*Render Rows*@
            <tbody class="mud-table-body">
                @foreach (var leaf in ColRender.Leaves)
                {
                    var path = leaf.Path;
                    var newLeaf = path.LastOrDefault(p => !p.IsFirstChild);
                        //var lastLeaf = path.FirstOrDefault(p => !p.IsLastChild);
                        bool levelFound = (newLeaf == null);
                        //var rowClass = new CssBuilder(RowClass).AddClass(RowClassFunc?.Invoke(leaf)).AddClass(RowCssClass).Build();
                        //var rowStyle = new StyleBuilder().AddStyle(RowStyle).AddStyle(RowStyleFunc?.Invoke(leaf)).Build();
                        //var isRowTotal = lastLeaf is PivotTableTotalColumnRender<T>;
                        bool isRowTotal = false;
                        int inverseDepth = 0;                       
                        //var isT = leaf.Children == null ? true : false;
                        <tr class="@_rowClass tmpa" @key="leaf">
                            @foreach (var cell in path)
                        {
                            if (!levelFound && cell != newLeaf)
                                continue;
                            levelFound = true;
                            isRowTotal = false;

                            var rowSpan = cell.Leaf.Count() * VerticalMeasureRatio;
                            var isTotal = (cell is PivotTableTotalColumnRender<T>);
                            int depth = isTotal ? cell.depth - 1 : cell.depth;
                            var colSpan = (isTotal ? ColRender.MaxDepth - cell.depth : 1);
                            inverseDepth = ColRender.MaxDepth - depth;
                            @if (colSpan > 0)
                            {
                                    var calcClass = new CssBuilder(CellClass).AddClass($"ch-{inverseDepth}").AddClass(TotalClass, isTotal).Build();
                                <th class="@calcClass" colspan="@colSpan" rowspan="@rowSpan">@cell.Title</th>
                                isRowTotal = true;
                            }   
                        }

                        @if (IsVertical)
                        {
                            @foreach (var measure in _pivot.Measures)
                            {
                                /*Component RenderMeasureTitleCell */
                                <th class="@_measureTitleClass">measure.Title</th>

                                @foreach (var colHeaderCell in RowRender.Leaves)
                                {
                                        var calcClass = new CssBuilder(CellClass).AddClass($"ch-{inverseDepth}", isRowTotal).AddClass(TotalClass, isRowTotal).Build();
                                    <td class="@calcClass">@_pivot[leaf.Cell, colHeaderCell.Cell, measure].ToString(measure.Format)</td>
                                }
                                @if (measure != _pivot.Measures.Last())
                                {
                                    @((MarkupString)($"</tr><tr class=\"{_rowClass} tmpg\">"));
                                }
                                }
                            }
                            else
                            {
                                foreach (var colHeaderCell in RowRender.Leaves)
                                {
                                    foreach (var measure in _pivot.Measures)
                                    {
                                        //colHeaderCell.depth;
                                        var lastChild = colHeaderCell.IsLastChild;
                                        //ColRender.MaxDepth - cell.depth
                                        var inverseRowDepth =  RowRender.MaxDepth - colHeaderCell.depth;
                                        var totalDepth = isRowTotal ? inverseDepth + inverseRowDepth : inverseRowDepth;

                                        //var d = colHeaderCell.depth;
                                        var calcClass = new CssBuilder(CellClass).AddClass($"ch-{inverseDepth}", isRowTotal).AddClass($"rh-{inverseRowDepth}").AddClass(TotalClass, isRowTotal).Build();
                                        <td class="@calcClass @totalDepth">@_pivot[leaf.Cell, colHeaderCell.Cell, measure].ToString(measure.Format)</td>
                                }
                            }
                        }
                    </tr>

                }
            </tbody>
        </table>
        </div>
    }
</div>