@using System.Net.Http.Json
@using System.IO
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Logging
@using MudBlazor.Utilities
@namespace MudBlazor.Docs.Examples
@inject NavigationManager Nav
@inject IServiceProvider ServiceProvider
@inject ILoggerFactory LoggerFactory

<MudDataGrid @ref="grid" Items="@employees" ColumnsPanelReordering="true" Hideable="true" Filterable="true" Groupable="true" FilterMode="DataGridFilterMode.Simple" ShowMenuIcon="true">
    <Columns>
        <SelectColumn T="Employee" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Position" />
        <PropertyColumn Property="x => x.YearsEmployed" Title="Years Employed" CellStyleFunc="@_cellStyleFunc" />
        <PropertyColumn Property="x => x.Salary" Format="C" />
        <PropertyColumn Property="x => x.Salary * x.YearsEmployed" Title="Total Earned" Format="C" />
        <TemplateColumn CellClass="d-flex justify-end" Title="Rating">
            <CellTemplate>
                <MudStack Row>
                    <MudRating Size="@Size.Small" SelectedValue="@context.Item.Rating" />
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Hire</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
<div class="d-flex flex-rows flex-wrap gap-1">
    <div class="flex-grow-1">
        <MudButton class="my-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportCSV">Export CSV</MudButton>
        <MudTextField @bind-Value=CSVExport Label="CSV Export" Variant="Variant.Outlined" Lines="5"></MudTextField>
    </div>
    <div class="flex-grow-1">
        <MudButton class="my-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportHTML">Export HTML</MudButton>
        <MudTextField @bind-Value=HTMLExport Label="HTML Export" Variant="Variant.Outlined" Lines="5"></MudTextField>
    </div>
</div>

@code {
    [CascadingParameter]
    protected MudThemeProvider ThemeProvider { get; set; }

    public record Employee(string Name, string Position, int YearsEmployed, int Salary, int Rating);
    public IEnumerable<Employee> employees;
    public MudDataGrid<Employee> grid = null;
    string CSVExport { get; set; }
    string HTMLExport { get; set; }
    HtmlRenderer htmlRenderer;

    protected override void OnInitialized()
    {
        htmlRenderer = new Microsoft.AspNetCore.Components.Web.HtmlRenderer(ServiceProvider, LoggerFactory);
        employees = new List<Employee>
        {
            new Employee("Sam", "CPA", 23, 87_000, 4),
            new Employee("Alicia", "Product Manager", 11, 143_000, 5),
            new Employee("Ira", "Developer", 4, 92_000, 3),
            new Employee("John", "IT Director", 17, 229_000, 4),
        };
    }

    private Func<Employee, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (x.YearsEmployed == 23)
            style += "background-color:#8CED8C";

        else if (x.YearsEmployed == 11)
            style += "background-color:#E5BDE5";

        else if (x.YearsEmployed == 4)
            style += "background-color:#EACE5D";

        else if (x.YearsEmployed == 17)
            style += "background-color:#F1F165";

        if (x.YearsEmployed >= 17)
            style += ";font-weight:bold";

        return style;
    };

    private async Task ExportCSV()
    {
        //Export isn't robust it is only for demonstration purposes
        using var stream = new MemoryStream();
        var writer = new StreamWriter(stream);
        //header
        foreach (var column in grid.RenderedColumns.Where(x => !x.State.Hidden))
        {
            await writer.WriteAsync(column.Title);
            await writer.WriteAsync(',');
        }
        await writer.WriteAsync(writer.NewLine);

        //rows
        foreach (var item in grid.FilteredItems)
        {
            foreach (var column in grid.RenderedColumns.Where(x => !x.State.Hidden))
            {
                var cell = column.GetCell(item).ComputedValue;
                await writer.WriteAsync((cell is IFormattable) ? (((IFormattable)cell)?.ToString(column.Format, column.Culture)) : cell?.ToString());
                await writer.WriteAsync(',');
            }
            await writer.WriteAsync(writer.NewLine);
        }
        await writer.FlushAsync();
        stream.Position = 0;

        //write to a file here
        using StreamReader reader = new StreamReader(stream);
        CSVExport = reader.ReadToEnd();
        await writer.DisposeAsync();
        reader.Dispose();
    }

    private async Task ExportHTML()
    {
        //Export isn't robust it is only for demonstration purposes
        using var stream = new MemoryStream();
        var writer = new StreamWriter(stream);

        //header
        await writer.WriteLineAsync("<html><head>");
        await writer.WriteLineAsync(ThemeProvider.BuildTheme());
        await writer.WriteLineAsync($"<link href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;display=swap' rel='stylesheet'>");
        await writer.WriteLineAsync($"<link href='https://fonts.googleapis.com/css2?family=Public+Sans:wght@400;500;600;700&amp;display=swap' rel='stylesheet'>");
        await writer.WriteLineAsync($"<link href='{Nav.BaseUri}_content/MudBlazor/MudBlazor.min.css' rel='stylesheet'>");
        await writer.WriteLineAsync($"<link href='{Nav.BaseUri}_content/MudBlazor.Docs/MudBlazorDocs.min.css' rel='stylesheet'>");
        await writer.WriteLineAsync("</head><body>");

        await writer.WriteLineAsync("<table class='mud-table-root'><thead class='mud-table-head'><tr class='mud-table-row'>");
        foreach (var column in grid.RenderedColumns.Where(x => !x.State.Hidden))
        {
            await writer.WriteAsync("<th class='mud-table-cell'>");
            await writer.WriteAsync(column.Title);
            await writer.WriteAsync("</th>");
        }
        await writer.WriteLineAsync("</tr></thead>");
        await writer.WriteLineAsync("<tbody class='mud-table-body'>");

        using var renderer = new StaticRenderer(ServiceProvider, LoggerFactory);

        //rows
        foreach (var item in grid.FilteredItems)
        {
            var rowClass = new CssBuilder(grid.RowClass).AddClass(grid.RowClassFunc?.Invoke(item, 0)).Build();
            var rowStyle = new StyleBuilder().AddStyle(grid.RowStyle).AddStyle(grid.RowStyleFunc?.Invoke(item, 0)).Build();

            await writer.WriteAsync("<tr class='mud-table-row {rowClass}' Style='{rowStyle}'>");
            foreach (var column in grid.RenderedColumns.Where(x => !x.State.Hidden))
            {
                var cell = column.GetCell(item);
                await writer.WriteAsync($"<td data-label='{column.Title} ' class='{cell.ComputedClass}' style='{cell.ComputedStyle}'>");

                if (column.CellTemplate is not null)
                {
                    await writer.WriteAsync(await renderer.GetHtml(column.CellTemplate, cell.CellContext));
                }
                else
                    await writer.WriteAsync((cell.ComputedValue is IFormattable) ? (((IFormattable)cell.ComputedValue)?.ToString(column.Format, column.Culture)) : cell.ComputedValue?.ToString());

                await writer.WriteAsync("</td>");
            }
            await writer.WriteLineAsync("</tr>");
            await writer.WriteLineAsync("</tbody>");
        }
        await writer.WriteLineAsync("</table></body></html>");
        await writer.FlushAsync();
        stream.Position = 0;

        //write to a file here
        using StreamReader reader = new StreamReader(stream);
        HTMLExport = reader.ReadToEnd();
        await writer.DisposeAsync();
        reader.Dispose();
    }

}
